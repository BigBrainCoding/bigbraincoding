[{"/var/www/bigbraincoding.com/html/pages/_app.tsx":"1","/var/www/bigbraincoding.com/html/pages/api/hello.ts":"2","/var/www/bigbraincoding.com/html/pages/index.tsx":"3","/var/www/bigbraincoding.com/html/components/About.tsx":"4","/var/www/bigbraincoding.com/html/components/Contact.tsx":"5","/var/www/bigbraincoding.com/html/components/Footer.tsx":"6","/var/www/bigbraincoding.com/html/components/Jobs.tsx":"7","/var/www/bigbraincoding.com/html/components/Navbar.tsx":"8","/var/www/bigbraincoding.com/html/components/Projects.tsx":"9","/var/www/bigbraincoding.com/html/components/Skill.tsx":"10","/var/www/bigbraincoding.com/html/components/Skills.tsx":"11"},{"size":847,"mtime":1686945682725,"results":"12","hashOfConfig":"13"},{"size":305,"mtime":1686945682725,"results":"14","hashOfConfig":"13"},{"size":4673,"mtime":1686945682725,"results":"15","hashOfConfig":"13"},{"size":1771,"mtime":1686945682721,"results":"16","hashOfConfig":"13"},{"size":6215,"mtime":1686945682721,"results":"17","hashOfConfig":"13"},{"size":1540,"mtime":1686945682721,"results":"18","hashOfConfig":"13"},{"size":1465,"mtime":1686945682721,"results":"19","hashOfConfig":"13"},{"size":2417,"mtime":1686945682721,"results":"20","hashOfConfig":"13"},{"size":3901,"mtime":1686945682721,"results":"21","hashOfConfig":"13"},{"size":736,"mtime":1686945682721,"results":"22","hashOfConfig":"13"},{"size":1318,"mtime":1686945682721,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ydap5c",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/bigbraincoding.com/html/pages/_app.tsx",[],[],"/var/www/bigbraincoding.com/html/pages/api/hello.ts",[],[],"/var/www/bigbraincoding.com/html/pages/index.tsx",["65"],[],"import type { NextPage, GetStaticProps } from \"next\";\nimport Head from \"next/head\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport { graphcms, QUERY } from \"../services\";\nimport { ISkills, IJobs, IProjects, Theme } from \"../typings\";\nimport { Navbar } from \"../components/Navbar\";\nimport { About } from \"../components/About\";\nimport { Jobs } from \"../components/Jobs\";\nimport { Projects } from \"../components/Projects\";\nimport { Skills } from \"../components/Skills\";\nimport { Contact } from \"../components/Contact\";\nimport { Footer } from \"../components/Footer\";\nimport ScrollUp from \"../assets/scrollup.webp\";\n\ninterface IHomeProps {\n  jobs: IJobs[];\n  projects: IProjects[];\n  skills: ISkills[];\n}\n\nconst Home: NextPage<IHomeProps> = ({ jobs, projects, skills }) => {\n  const jobsRef = useRef<HTMLElement>(null);\n  const projectsRef = useRef<HTMLElement>(null);\n  const skillsRef = useRef<HTMLElement>(null);\n  const contactRef = useRef<HTMLElement>(null);\n  const [theme, setTheme] = useState<Theme>(\"light\");\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"themeValue\");\n    setTheme(data === \"light\" || !data ? \"light\" : \"dark\");\n  }, []);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > 500) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility);\n\n    return () => window.removeEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  const switchTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    localStorage.setItem(\"themeValue\", newTheme);\n    setTheme(newTheme);\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  const handleNavItemClick = (item: string) => {\n    let scrollObject = {};\n    switch (item) {\n      case \"about\":\n        scrollObject = {\n          top: 0,\n          behavior: \"smooth\",\n        };\n        break;\n\n      case \"jobs\":\n        scrollObject = {\n          top: jobsRef.current?.offsetTop! - 70,\n          behavior: \"smooth\",\n        };\n        break;\n\n      case \"projects\":\n        scrollObject = {\n          top: projectsRef.current?.offsetTop! - 70,\n          behavior: \"smooth\",\n        };\n        break;\n\n      case \"skills\":\n        scrollObject = {\n          top: skillsRef.current?.offsetTop! - 70,\n          behavior: \"smooth\",\n        };\n        break;\n\n      case \"contact\":\n        scrollObject = {\n          top: contactRef.current?.offsetTop! - 70,\n          behavior: \"smooth\",\n        };\n        break;\n\n      default:\n        break;\n    }\n\n    window.scrollTo(scrollObject);\n  };\n\n  return (\n    <div>\n      <Head>\n        <title>Himanshu Kashyap</title>\n        <meta\n          name=\"keywords\"\n          content=\"himan_kash, himanshu, kashyap, himanshu kashyap, iamhiman, lpu, dehradun, software developer, web developer\"\n        />\n        <meta\n          name=\"description\"\n          content=\"Hey, I'm Himanshu Kashyap a Software Developer from Dehradun, Uttarakhand. Here's my portfolio where you can see all my projects, blogs, and achievements.\"\n        />\n        <meta name=\"author\" content=\"Himanshu Kashyap\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main data-theme={theme}>\n        <Navbar onNavItemClick={handleNavItemClick} switchTheme={switchTheme} theme={theme} />\n\n        <section className=\"about\">\n          <About />\n        </section>\n\n        <section className=\"jobs\" ref={jobsRef}>\n          <Jobs jobs={jobs} />\n        </section>\n\n        <section className=\"projects\" ref={projectsRef}>\n          <Projects projects={projects} />\n        </section>\n\n        <section className=\"skills\" ref={skillsRef}>\n          <Skills skills={skills} />\n        </section>\n\n        <section className=\"contact\" ref={contactRef}>\n          <Contact theme={theme} />\n        </section>\n\n        <Footer />\n\n        {isVisible && <img src={ScrollUp.src} alt=\"\" className=\"scroll-up\" onClick={scrollToTop} />}\n\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={3500}\n          hideProgressBar={false}\n          closeOnClick={true}\n          pauseOnFocusLoss={false}\n          pauseOnHover={false}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const { skills, jobs, projects } = await graphcms.request(QUERY);\n\n  return {\n    props: {\n      skills,\n      jobs,\n      projects,\n    },\n    revalidate: 10,\n  };\n};\n","/var/www/bigbraincoding.com/html/components/About.tsx",["66","67","68","69"],[],"import type { NextPage } from \"next\";\nimport github from \"../assets/github.webp\";\nimport linkedin from \"../assets/linkedin.webp\";\nimport instagram from \"../assets/instagram.webp\";\nimport gmail from \"../assets/gmail.webp\";\n\nexport const About: NextPage = () => {\n  return (\n    <>\n      <div className=\"about_left\">\n        <h1 className=\"about_left_head\">Hi, I&apos;m Himanshu Kashyap</h1>\n        <p className=\"about_left_text\">\n          Hi! I am Himanshu Kashyap from Dehradun, Uttarakhand. I am Computer Science Engineering\n          Graduate with minors in Cyber Security. I am passionate about writing clean, efficient and\n          optimized code. I wrote my First Program in C++ in 2012.\n        </p>\n        <div className=\"about_left_socialMedia\">\n          <img\n            src={github.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://github.com/iamhiman\", \"_blank\")}\n          />\n          <img\n            src={linkedin.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://www.linkedin.com/in/himankash/\", \"_blank\")}\n          />\n          <img\n            src={instagram.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://www.instagram.com/himan_kash/\", \"_blank\")}\n          />\n          <img\n            src={gmail.src}\n            alt=\"\"\n            onClick={() => window.open(\"mailto:himanshu27kashyap@gmail.com\", \"_blank\")}\n          />\n        </div>\n        <div\n          className=\"about_left_starme\"\n          onClick={() => window.open(\"https://github.com/iamhiman/personal-webpage-v2\", \"_blank\")}\n        >\n          ⭐ Star Me On Github\n        </div>\n      </div>\n      <div className=\"about_right\">\n        <div className=\"about_right_profilePic\" />\n      </div>\n    </>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Contact.tsx",["70"],[],"import type { NextPage } from \"next\";\nimport { useState, useRef } from \"react\";\nimport emailjs from \"@emailjs/browser\";\nimport { ThreeDots } from \"react-loader-spinner\";\nimport { toast } from \"react-toastify\";\nimport Gmail from \"../assets/gmail.webp\";\nimport { Theme } from \"../typings\";\n\ninterface IFormValues {\n  name: string;\n  email: string;\n  message: string;\n}\n\ninterface IFormErrorValues {\n  name: boolean;\n  email: boolean;\n  message: boolean;\n}\n\ninterface IContactProps {\n  theme: Theme;\n}\n\nexport const Contact: NextPage<IContactProps> = ({ theme }) => {\n  const [values, setValues] = useState<IFormValues>({ name: \"\", email: \"\", message: \"\" });\n  const [errors, setErrors] = useState<IFormValues>({ name: \"\", email: \"\", message: \"\" });\n  const [errorsFlag, setErrorsFlag] = useState<IFormErrorValues>({\n    name: false,\n    email: false,\n    message: false,\n  });\n  const [loading, setLoading] = useState<boolean>(false);\n  const form = useRef<HTMLFormElement>(null);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    const objFlag = { name: false, email: false, message: false };\n    const obj = { name: \"\", email: \"\", message: \"\" };\n    const lettersregex = /^[a-zA-Z ]*$/;\n    const mailregex = /^([_\\-\\.0-9a-zA-Z]+)@([_\\-\\.0-9a-zA-Z]+)\\.([a-zA-Z]){2,7}$/;\n\n    if (values?.name?.trim().length === 0) {\n      objFlag.name = true;\n      obj.name = \"*Name cannot be empty !\";\n    } else if (values?.name.replace(/\\s+/g, \"\").length <= 2) {\n      objFlag.name = true;\n      obj.name = \"*Name cannot be less than 3 characters !\";\n    } else if (values?.name.replace(/\\s+/g, \"\").length > 20) {\n      objFlag.name = true;\n      obj.name = \"*Name cannot be greater than 20 characters !\";\n    } else if (!values?.name.match(lettersregex)) {\n      objFlag.name = true;\n      obj.name = \"*Name can only contain alphabets\";\n    } else {\n      objFlag.name = false;\n      obj.name = \"\";\n    }\n\n    if (values?.email?.trim().length === 0) {\n      objFlag.email = true;\n      obj.email = \"*Email cannot be empty !\";\n    } else if (values?.email.length > 40) {\n      objFlag.email = true;\n      obj.email = \"*Email should be less than 40 characters !\";\n    } else if (!values?.email.match(mailregex)) {\n      objFlag.email = true;\n      obj.email = \"*Please enter valid Email !\";\n    } else {\n      objFlag.email = false;\n      obj.email = \"\";\n    }\n\n    if (values?.message?.trim().length === 0) {\n      objFlag.message = true;\n      obj.message = \"*Message cannot be empty !\";\n    } else if (values?.message.length > 200) {\n      objFlag.message = true;\n      obj.message = \"*Please write a short message(Max 200 Characters) !\";\n    } else {\n      objFlag.message = false;\n      obj.message = \"\";\n    }\n\n    setErrorsFlag(errorsFlag => ({ ...errorsFlag, ...objFlag }));\n    setErrors({ ...errors, ...obj });\n\n    if (!objFlag.name && !objFlag.email && !objFlag.message) {\n      setValues({ name: \"\", email: \"\", message: \"\" });\n      setLoading(true);\n\n      try {\n        const response = await emailjs.sendForm(\n          process.env.NEXT_PUBLIC_SERVICE_ID!,\n          process.env.NEXT_PUBLIC_TEMPLATE_ID!,\n          form.current!,\n          process.env.NEXT_PUBLIC_PUBLIC_KEY!\n        );\n\n        if (response.status === 200) {\n          setLoading(false);\n          toast.success(\"Form Submitted !\");\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        toast.error(\"Form Submission Failed. Please send me an email !\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"contact_heading\">Contact Me</h1>\n      <div className=\"contact_email\">\n        <img src={Gmail.src} alt=\"\" /> himanshu27kashyap@gmail.com\n      </div>\n      {!loading ? (\n        <form className=\"contact_form\" autoComplete=\"off\" ref={form}>\n          <div className=\"contact_form_formcontrol\">\n            <label htmlFor=\"name\" className=\"contact_form_formcontrol_label\">\n              Name :\n            </label>\n            <input\n              className=\"contact_form_formcontrol_input\"\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              value={values?.name ?? \"\"}\n              onChange={handleChange}\n            />\n            <p className=\"contact_form_formcontrol_error\">{errorsFlag?.name && errors?.name}</p>\n          </div>\n          <div className=\"contact_form_formcontrol\">\n            <label htmlFor=\"email\" className=\"contact_form_formcontrol_label\">\n              Email :\n            </label>\n            <input\n              className=\"contact_form_formcontrol_input\"\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={values?.email ?? \"\"}\n              onChange={handleChange}\n            />\n            <p className=\"contact_form_formcontrol_error\">{errorsFlag?.email && errors?.email}</p>\n          </div>\n          <div className=\"contact_form_formcontrol\">\n            <label htmlFor=\"message\" className=\"contact_form_formcontrol_label\">\n              Message :\n            </label>\n            <textarea\n              className=\"contact_form_formcontrol_input\"\n              id=\"message\"\n              name=\"message\"\n              value={values?.message ?? \"\"}\n              onChange={handleChange}\n            />\n            <p className=\"contact_form_formcontrol_error\">\n              {errorsFlag?.message && errors?.message}\n            </p>\n          </div>\n          <div className=\"contact_form_formcontrol\">\n            <button className=\"contact_form_formcontrol_submit\" onClick={handleSubmit}>\n              Submit\n            </button>\n          </div>\n        </form>\n      ) : (\n        <div className=\"contact_submission\">\n          <div className=\"contact_submission_head\">Submitting Form Details</div>\n          <ThreeDots\n            ariaLabel=\"loading-indicator\"\n            color={theme === \"light\" ? \"#343e47\" : \"#ffffff\"}\n          />\n          <div className=\"contact_submission_text\">Please wait...</div>\n        </div>\n      )}\n    </>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Footer.tsx",["71","72","73","74"],[],"import type { NextPage } from \"next\";\nimport Github from \"../assets/github.webp\";\nimport Linkedin from \"../assets/linkedin.webp\";\nimport Instagram from \"../assets/instagram.webp\";\nimport Gmail from \"../assets/gmail.webp\";\n\nexport const Footer: NextPage = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer_copyright\">\n        <p className=\"footer_copyright_textOne\">No &copy; copyright issues.</p>\n        <p className=\"footer_copyright_textTwo\">Feel free to copy.</p>\n        <p className=\"footer_copyright_textThree\">\n          Link to previous\n          <span onClick={() => window.open(\"http://himankash.epizy.com/\", \"_blank\")}> version</span>\n        </p>\n      </div>\n      <div className=\"footer_socialMedia\">\n        <p>Connect with me !</p>\n        <div className=\"footer_socialMedia_links\">\n          <img\n            src={Github.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://github.com/iamhiman\", \"_blank\")}\n          />\n          <img\n            src={Linkedin.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://www.linkedin.com/in/himankash/\", \"_blank\")}\n          />\n          <img\n            src={Instagram.src}\n            alt=\"\"\n            onClick={() => window.open(\"https://www.instagram.com/himan_kash/\", \"_blank\")}\n          />\n          <img\n            src={Gmail.src}\n            alt=\"\"\n            onClick={() => window.open(\"mailto:himanshu27kashyap@gmail.com\", \"_blank\")}\n          />\n        </div>\n      </div>\n    </footer>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Jobs.tsx",["75","76","77"],[],"import type { NextPage } from \"next\";\nimport { IJobs, Months } from \"../typings\";\nimport linkedin from \"../assets/linkedin.webp\";\nimport www from \"../assets/www.webp\";\n\ninterface IJobsProps {\n  jobs: IJobs[];\n}\n\nexport const Jobs: NextPage<IJobsProps> = ({ jobs }) => {\n  return (\n    <>\n      <h1 className=\"jobs_heading\">Work</h1>\n\n      <div className=\"jobs_timeline_container\">\n        {jobs?.map(job => (\n          <div className=\"job\" key={job?.id}>\n            <h2>{job?.company}</h2>\n            <h3>{job?.designation}</h3>\n            <img src={job?.logo?.url} alt=\"\" className=\"job_companyLogo\" />\n            <div className=\"job_date_beforeLine\">\n              {`${Months[parseInt(job?.from?.split(\"-\")[1])]}, ${job?.from?.split(\"-\")[0]}`}\n            </div>\n            <div className=\"job_date\">\n              {`${Months[parseInt(job?.from?.split(\"-\")[1])]}, ${job?.from?.split(\"-\")[0]}`} -{\" \"}\n              {job?.to\n                ? `${Months[parseInt(job?.to?.split(\"-\")[1])]}, ${job?.to?.split(\"-\")[0]}`\n                : \"Present\"}\n            </div>\n            <div className=\"job_companyLinks\">\n              <img\n                src={linkedin?.src}\n                alt=\"\"\n                onClick={() => window.open(job?.companyLinkedin, \"_blank\")}\n              />\n              <img src={www?.src} alt=\"\" onClick={() => window.open(job?.companyUrl, \"_blank\")} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Navbar.tsx",["78"],[],"import type { NextPage } from \"next\";\nimport { useState } from \"react\";\nimport Moon from \"../assets/moon.webp\";\nimport Sun from \"../assets/sun.webp\";\n\ninterface INavbarProps {\n  onNavItemClick: (item: string) => void;\n  switchTheme: () => void;\n  theme: string;\n}\n\nexport const Navbar: NextPage<INavbarProps> = ({\n  onNavItemClick = () => {},\n  switchTheme = () => {},\n  theme,\n}) => {\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"menu\">\n          <input\n            className=\"check\"\n            type=\"checkbox\"\n            onChange={() => setShowSidebar(!showSidebar)}\n            checked={showSidebar}\n          />\n          <div className={showSidebar ? \"line line-1\" : \"line line1\"}></div>\n          <div className={showSidebar ? \"line line-2\" : \"line line2\"}></div>\n          <div className={showSidebar ? \"line line-3\" : \"line line3\"}></div>\n        </div>\n\n        <p className=\"navbar_name\">\n          <span>Himanshu</span>\n          <img src={theme === \"light\" ? Sun.src : Moon.src} alt=\"\" onClick={switchTheme} />\n        </p>\n        <div className=\"navbar_list\">\n          <p className=\"navbar_list_item\" onClick={() => onNavItemClick(\"about\")}>\n            About\n          </p>\n          <p className=\"navbar_list_item\" onClick={() => onNavItemClick(\"jobs\")}>\n            Work\n          </p>\n          <p className=\"navbar_list_item\" onClick={() => onNavItemClick(\"projects\")}>\n            Projects\n          </p>\n          <p className=\"navbar_list_item\" onClick={() => onNavItemClick(\"skills\")}>\n            Skills\n          </p>\n          <p className=\"navbar_list_item\" onClick={() => onNavItemClick(\"contact\")}>\n            Contact\n          </p>\n        </div>\n      </nav>\n\n      <div className={showSidebar ? \"sidebar active\" : \"sidebar\"}>\n        <p className=\"sidebar_item\" onClick={() => onNavItemClick(\"about\")}>\n          About\n        </p>\n        <p className=\"sidebar_item\" onClick={() => onNavItemClick(\"jobs\")}>\n          Work\n        </p>\n        <p className=\"sidebar_item\" onClick={() => onNavItemClick(\"projects\")}>\n          Projects\n        </p>\n        <p className=\"sidebar_item\" onClick={() => onNavItemClick(\"skills\")}>\n          Skills\n        </p>\n        <p className=\"sidebar_item\" onClick={() => onNavItemClick(\"contact\")}>\n          Contact\n        </p>\n      </div>\n    </>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Projects.tsx",["79","80","81"],[],"import type { NextPage } from \"next\";\nimport { IProjects } from \"../typings\";\nimport Github from \"../assets/github.webp\";\nimport Web from \"../assets/www.webp\";\nimport { useEffect, useState } from \"react\";\n\ninterface IProjectsProps {\n  projects: IProjects[];\n}\n\nexport const Projects: NextPage<IProjectsProps> = ({ projects }) => {\n  const [activeTag, setActiveTag] = useState<string>(\"all\");\n  const [filteredProjects, setFilteredProjects] = useState<IProjects[]>([]);\n\n  useEffect(() => {\n    if (activeTag === \"all\") {\n      setFilteredProjects(projects);\n      return;\n    }\n\n    const filtered = projects?.filter(project =>\n      project?.techStack?.some(tech =>\n        tech?.text?.toLowerCase()?.includes(activeTag?.toLowerCase())\n      )\n    );\n\n    setFilteredProjects(filtered);\n  }, [activeTag, projects]);\n\n  return (\n    <>\n      <h1 className=\"projects_heading\">Projects</h1>\n      <div className=\"projects_filter\">\n        <div className=\"projects_filter_box\">\n          <div\n            onClick={() => setActiveTag(\"all\")}\n            className={`projects_filter_box_item ${activeTag === \"all\" ? \"activeTag\" : \"\"}`}\n          >\n            All\n          </div>\n          <div\n            onClick={() => setActiveTag(\"react\")}\n            className={`projects_filter_box_item ${activeTag === \"react\" ? \"activeTag\" : \"\"}`}\n          >\n            React\n          </div>\n          <div\n            onClick={() => setActiveTag(\"typescript\")}\n            className={`projects_filter_box_item ${activeTag === \"typescript\" ? \"activeTag\" : \"\"}`}\n          >\n            TypeScript\n          </div>\n          <div\n            onClick={() => setActiveTag(\"javascript\")}\n            className={`projects_filter_box_item ${activeTag === \"javascript\" ? \"activeTag\" : \"\"}`}\n          >\n            JavaScript\n          </div>\n          <div\n            onClick={() => setActiveTag(\"php\")}\n            className={`projects_filter_box_item ${activeTag === \"php\" ? \"activeTag\" : \"\"}`}\n          >\n            PHP\n          </div>\n          <div\n            onClick={() => setActiveTag(\"c++\")}\n            className={`projects_filter_box_item ${activeTag === \"c++\" ? \"activeTag\" : \"\"}`}\n          >\n            C++\n          </div>\n        </div>\n        <div className=\"projects_filter_cardsBox\">\n          {filteredProjects?.map(project => (\n            <div key={project?.id} className=\"projects_filter_cardsBox_card\">\n              <img src={project?.image?.url} alt=\"\" className=\"projects_filter_cardsBox_card_img\" />\n              <p className=\"projects_filter_cardsBox_card_title\">{project?.title}</p>\n              <div className=\"projects_filter_cardsBox_card_techStack\">\n                {project?.techStack?.map(stack => {\n                  if (stack?.text?.toLowerCase() !== \"all\") {\n                    return (\n                      <span\n                        key={stack?.text}\n                        className=\"projects_filter_cardsBox_card_techStack_tech\"\n                      >\n                        {stack?.text}\n                      </span>\n                    );\n                  }\n                })}\n              </div>\n              <p className=\"projects_filter_cardsBox_card_description\">{project?.description}</p>\n              <div className=\"projects_filter_cardsBox_card_links\">\n                <img\n                  src={Github.src}\n                  alt=\"\"\n                  onClick={() => window.open(project?.githubLink, \"_blank\")}\n                  className={`${project?.demoLink && \"margin-right\"}`}\n                />\n                {project?.demoLink && (\n                  <img\n                    src={Web.src}\n                    alt=\"\"\n                    onClick={() => window.open(project?.demoLink, \"_blank\")}\n                  />\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Skill.tsx",["82"],[],"import type { NextPage } from \"next\";\nimport { ISkills } from \"../typings\";\n\ninterface ISkillProps {\n  skills: ISkills[];\n  skill: string;\n}\n\nexport const Skill: NextPage<ISkillProps> = ({ skills, skill }) => {\n  return (\n    <div className=\"skills_box_container\">\n      <p className=\"skills_box_container_heading\">{skill}</p>\n      <div className=\"skills_box_container_row\">\n        {skills?.map((skill: ISkills) => (\n          <div\n            key={skill?.id}\n            className=\"skills_box_container_row_card\"\n            onClick={() => window.open(skill?.url, \"_blank\")}\n          >\n            <img src={skill?.image?.url} alt=\"\" />\n            <p>{skill?.skill}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/var/www/bigbraincoding.com/html/components/Skills.tsx",[],[],{"ruleId":"83","severity":1,"message":"84","line":148,"column":23,"nodeType":"85","endLine":148,"endColumn":100},{"ruleId":"83","severity":1,"message":"84","line":18,"column":11,"nodeType":"85","endLine":22,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":23,"column":11,"nodeType":"85","endLine":27,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":28,"column":11,"nodeType":"85","endLine":32,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":33,"column":11,"nodeType":"85","endLine":37,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":120,"column":9,"nodeType":"85","endLine":120,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":21,"column":11,"nodeType":"85","endLine":25,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":26,"column":11,"nodeType":"85","endLine":30,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":31,"column":11,"nodeType":"85","endLine":35,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":36,"column":11,"nodeType":"85","endLine":40,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":20,"column":13,"nodeType":"85","endLine":20,"endColumn":76},{"ruleId":"83","severity":1,"message":"84","line":31,"column":15,"nodeType":"85","endLine":35,"endColumn":17},{"ruleId":"83","severity":1,"message":"84","line":36,"column":15,"nodeType":"85","endLine":36,"endColumn":99},{"ruleId":"83","severity":1,"message":"84","line":36,"column":11,"nodeType":"85","endLine":36,"endColumn":92},{"ruleId":"83","severity":1,"message":"84","line":75,"column":15,"nodeType":"85","endLine":75,"endColumn":101},{"ruleId":"83","severity":1,"message":"84","line":93,"column":17,"nodeType":"85","endLine":98,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":100,"column":19,"nodeType":"85","endLine":104,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":20,"column":13,"nodeType":"85","endLine":20,"endColumn":51},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]